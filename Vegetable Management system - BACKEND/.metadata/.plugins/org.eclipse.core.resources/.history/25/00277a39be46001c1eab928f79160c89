package com.hexaware.vegetablemanagement.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.vegetablemanagement.entity.*;
import com.hexaware.vegetablemanagement.repository.OrderRepository;
import com.hexaware.vegetablemanagement.repository.VendorVegRepo;
import com.hexaware.vegetablemanagement.service.AdminService;
import com.hexaware.vegetablemanagement.service.CustomerService;
import com.hexaware.vegetablemanagement.service.OrderService;
import com.hexaware.vegetablemanagement.service.VegetableService;
import com.hexaware.vegetablemanagement.service.VendorService;
import com.hexaware.vegetablemanagement.service.VendorVegService;

@RestController
public class AdminController {
	@Autowired
	private CustomerService custService;
	@Autowired
	private AdminService admService;
	@Autowired
	private OrderRepository ordRepo;
	@Autowired
	private OrderService ordService;
	
	@Autowired
	private VendorVegRepo venvegrep;
	
	@Autowired
	private VendorVegService venvegserv;
	
	@Autowired
	private VendorService venserv;
	
	@Autowired
	private VegetableService vegserv;

	
	@RequestMapping("/allCustomers")
	List<Customer> getAll() {
		return custService.findAll();
	}
	@RequestMapping("/allVegs")
	List<Vegetable> getAllVeg() {
		admService.save(new Admin(1, "ROOT", "root"));
		return vegserv.findAll();
	}
	@RequestMapping("/allVens")
	List<Vendor> getAllVens() {
		return venserv.findAll();
	}
	@RequestMapping("/customerById")
	Customer getCustomerDetails(@RequestParam(value = "id")  int custId) {
		return custService.findById(custId).get();
	}
	@PostMapping("/updateCustomerById")
	void updateCustomerDetails(@RequestBody Customer upCust) {
		Customer curr =  custService.findById((long)upCust.getId()).get();
		System.out.println(upCust.getId());
		curr.setPassword(upCust.getPassword());
		curr.setName(upCust.getName());
		curr.setAddress(upCust.getAddress());
		curr.setEmail(upCust.getEmail());
		curr.setPhn(upCust.getPhn());
		custService.save(curr);
	}
	@PostMapping("/deleteCustomerById")
	void deleteCustomerById(@RequestParam(value = "id")  int custId) {
		custService.delete(custId);
	}
	@RequestMapping("/vegByVendor")
	List<VendorVeg> AddCusyt(@RequestParam(value = "id")  int venId) {
		return venvegrep.findByVendor(venserv.findById((long) venId).get());
		
	}
	
	@PostMapping(value="/custloginauth")
	Map<String, String>  custLoginAuth(@RequestBody Customer cust) {
		HashMap<String, String> res = new HashMap<>();
		try {
		System.out.println(cust.getPassword()+"hdello");
			long custId = cust.getId();
		Customer currCust = custService.findById(custId).get();
		if(currCust.getPassword().equals(cust.getPassword())) {
			res.put("login", "true");
		    return res;
		    }

		else {
			res.put("login", "false");
		    return res;
		}
		}
		catch(Exception e) {
			e.printStackTrace();
			res.put("login", "false");
		    return res;

		}
	}
	
	@PostMapping(value="/adminloginauth")
	Map<String, String>  AdmnAuth(@RequestBody Admin admin) {
		HashMap<String, String> res = new HashMap<>();
		try {
		System.out.println(admin.getPassword()+"hdello");
			long admId = admin.getId();
		Admin curradm = admService.findById(admId).get();
		if(curradm.getPassword().equals(admin.getPassword())) {
			res.put("login", "true");
		    return res;
		    }

		else {
			res.put("login", "false");
		    return res;
		}
		}
		catch(Exception e) {
			e.printStackTrace();
			res.put("login", "false");
		    return res;

		}
	}
	
	@RequestMapping(value= "/orders")
	List<Order> getOrders(@RequestParam(value = "id")  int custId){
		//System.out.println(custService.findById(1).get());
		//long order_id = ordRepo.findByCustomer(custService.findById((long) custId).get()).get(0).getId();
		return ordRepo.findByCustomer(custService.findById((long) custId).get());
		
	}
	
	
}
